{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/player.js","webpack:///./src/background.js","webpack:///./src/enemy.js","webpack:///./src/level.js","webpack:///./src/menu.js","webpack:///./src/score_tracker.js","webpack:///./src/game.js","webpack:///./src/divekicker.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CONSTANTS","SPINFRAMES","Player","ctx","this","playerSprite","Image","src","spinSprite","x","y","velocity","sideVelocity","divekicking","jumping","currentSpinFrame","spinning","spinDelay","invincible","jumpCount","soundFXEnabled","initializeSoundFX","onload","draw","spinSound","Audio","jumpSound","divekickSound","volume","stopSpin","spinTimer","clearInterval","pause","currentTime","play","top","right","left","bottom","getBounds","playJumpSound","jumpAnimationTimer","setInterval","playDivekickSound","invincibleTimer","bounceAnimationTimer","spinDelayTimer","Math","abs","drawImage","length","updateSpinFrame","currentFrame","clearRect","drawJump","drawDivekick","drawSpin","drawBase","move","Background","scrollSpeed","backgroundImg","Enemy","moveDir","position","enemySprite","startingPosition","positiveMove","hit","change","drawHit","MAX_ENEMIES","SCROLL_SPEED","OFFSCREEN_ENEMY","Level","height","width","currentEnemyIdx","difficulty","enemies","createEnemy","spinImpactSound","divekickImpactSound","playbackRate","num","floor","random","player","enemy","scoreTracker","playerBounds","enemyBounds","bounce","enemyKill","playDivekickImpactSound","playSpinImpactSound","collision","forEach","collisionCheck","randomizeEnemySpawn","animate","enemyNum","push","shift","animateEnemies","scrollEnemies","Menu","game","menu","document","getElementById","controlsMenu","startButton","controlsButton","closeButton","initializeMenuButtons","openMenu","closeMenu","menuButtonSounds","addEventListener","startGame","id","className","playMenuButtonSound","gameStartTimer","start","ScoreTracker","score","scoreMultiplyer","that","scoreIncreaseTimer","enemyHit","font","lineWidth","fillStyle","fillText","Game","canvas","backgroundCtx","gameStatus","gamePaused","background","level","musicEnabled","drawToggle","currentToggle","initializeControls","rightPressed","leftPressed","finalScoreMessage","restartMessage","window","e","defaultPrevented","code","jump","diveKick","moveRight","moveLeft","spin","toggleMusic","toggleSoundFX","gameMusic","gameOverSound","loop","drawSoundToggle","drawToggleTimer","message","soundType","drawNotification","playerCollision","hitBottom","difficultyIncreaseTimer","stopSoundFX","resetScore","showRestartMessage","finalScore","innerHTML","gameOver","reset","requestAnimationFrame","hideRestartMessage","initializeScore","getContext","initializeGame"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/dist/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","const CONSTANTS = {\r\n    GRAVITY: 0.35,\r\n    TERMINAL_VELOCITY: 20,\r\n    JUMP_SPEED: 8,\r\n    BOUNCE_SPEED: 10,\r\n    MOVE_SPEED: 7,\r\n    DIVEKICK_SPEED: 20,\r\n    SPRITE_HEIGHT: 80,\r\n    SPRITE_WIDTH: 64\r\n};\r\n\r\nconst SPINFRAMES = [0, 64, 128, 196];\r\n\r\nclass Player {\r\n    constructor(ctx) {\r\n        this.ctx = ctx;\r\n        this.playerSprite = new Image();\r\n        this.playerSprite.src = './src/assets/divekicker_2-5-jump.png';\r\n        this.spinSprite = new Image();\r\n        this.spinSprite.src = './src/assets/spin_frames.png';\r\n        this.x = 0;\r\n        this.y = 500 / 4;\r\n        this.velocity = 0;\r\n        this.sideVelocity = 0;\r\n        this.divekicking = false;\r\n        this.jumping = false;\r\n        this.currentSpinFrame = -1;\r\n        this.spinning = false;\r\n        this.spinDelay = false;\r\n        this.invincible = false;\r\n        this.jumpCount = 2;\r\n        this.soundFXEnabled = true;\r\n        this.initializeSoundFX();\r\n\r\n        this.playerSprite.onload = () => this.draw(ctx);\r\n\r\n        this.draw = this.draw.bind(this);\r\n    }\r\n\r\n    initializeSoundFX() {\r\n        this.spinSound = new Audio('./src/assets/soundFX/spin_sound.wav');\r\n        this.jumpSound = new Audio('./src/assets/soundFX/jump_sound.mp3');\r\n        this.divekickSound = new Audio('./src/assets/soundFX/divekick_sound.mp3');\r\n        \r\n        if (this.soundFXEnabled) {\r\n            this.spinSound.volume = 0.4;\r\n            this.jumpSound.volume = 0.4;\r\n            this.divekickSound.volume = 0.2;\r\n        } else {\r\n            this.spinSound.volume = 0;\r\n            this.jumpSound.volume = 0;\r\n            this.divekickSound.volume = 0;\r\n        }\r\n\r\n    }\r\n\r\n    stopSoundFX() {\r\n        if (this.spinSound) {\r\n            this.stopSpin();\r\n        }\r\n    }\r\n\r\n    toggleSoundFX() {\r\n        if (this.soundFXEnabled) {\r\n            this.soundFXEnabled = false;\r\n            this.spinSound.volume = 0;\r\n            this.jumpSound.volume = 0;\r\n            this.divekickSound.volume = 0;\r\n        } else {\r\n            this.soundFXEnabled = true;\r\n            this.spinSound.volume = 0.4;\r\n            this.jumpSound.volume = 0.4;\r\n            this.divekickSound.volume = 0.2;\r\n        }\r\n    }\r\n\r\n    stopSpin() {\r\n        if (this.spinTimer) clearInterval(this.spinTimer);\r\n        this.spinning = false;\r\n        this.spinDelay = false;\r\n        this.spinSound.pause();\r\n        this.spinSound.currentTime = 0;\r\n    }\r\n\r\n    playJumpSound() {\r\n        this.jumpSound.pause();\r\n        this.jumpSound.currentTime = 0;\r\n        this.jumpSound.play();\r\n    }\r\n\r\n    playDivekickSound() {\r\n        if (!this.divekicking) {\r\n            this.divekickSound.pause();\r\n            this.divekickSound.currentTime = 0;\r\n            this.divekickSound.play();\r\n        }\r\n    }\r\n\r\n    getBounds() {\r\n        return {\r\n            top: this.y,\r\n            right: this.x + (CONSTANTS.SPRITE_WIDTH / 2),\r\n            left: this.x,\r\n            bottom: this.y + (CONSTANTS.SPRITE_HEIGHT / 2)\r\n        }\r\n    }\r\n\r\n    hitBottom() {\r\n        const bounds = this.getBounds();\r\n        if (bounds.bottom > 600) return true;\r\n        return false;\r\n    }\r\n\r\n    jump() {\r\n        if (this.jumpCount) {\r\n            this.stopSpin();\r\n            this.divekicking = false;\r\n            this.jumping = true;\r\n            this.playJumpSound();\r\n            this.velocity = -1 * CONSTANTS.JUMP_SPEED;\r\n            this.jumpCount--;\r\n            const jumpAnimationTimer = setInterval(() => {\r\n                this.jumping = false;\r\n                clearInterval(jumpAnimationTimer);\r\n            }, 1500);\r\n        }\r\n        \r\n    }\r\n\r\n    diveKick() {\r\n        this.stopSpin();\r\n        this.playDivekickSound();\r\n        this.velocity = CONSTANTS.DIVEKICK_SPEED;\r\n        this.jumping = false;\r\n        this.divekicking = true;\r\n    }\r\n\r\n    bounce() {\r\n        this.invincible = true;\r\n        this.divekicking = false;\r\n        this.jumping = true;\r\n        this.jumpCount = 2;\r\n        this.y -= CONSTANTS.BOUNCE_SPEED * 2;\r\n        this.velocity = -1 * CONSTANTS.BOUNCE_SPEED;\r\n\r\n        const invincibleTimer = setInterval(() => {\r\n            this.invincible = false;\r\n            clearInterval(invincibleTimer);\r\n        }, 100);\r\n\r\n        const bounceAnimationTimer = setInterval(() => {\r\n            this.jumping = false;\r\n            clearInterval(bounceAnimationTimer);\r\n        }, 1000);\r\n    }\r\n\r\n    spin() {\r\n        if (!this.spinning && !this.spinDelay) {\r\n            this.spinning = true;\r\n            this.spinDelay = true;\r\n            this.spinSound.play();\r\n\r\n            this.spinTimer = setInterval(() => {\r\n                this.spinning = false;\r\n                this.spinSound.pause();\r\n                this.spinSound.currentTime = 0;\r\n                clearInterval(this.spinTimer);\r\n            }, 800);\r\n\r\n            const spinDelayTimer = setInterval(() => {\r\n                this.spinDelay = false;\r\n                clearInterval(spinDelayTimer);\r\n            }, 100);\r\n        }\r\n    }\r\n\r\n    moveRight() {\r\n        this.sideVelocity = CONSTANTS.MOVE_SPEED;\r\n    }\r\n\r\n    moveLeft() {\r\n        this.sideVelocity = -CONSTANTS.MOVE_SPEED;\r\n    }\r\n\r\n    move() {\r\n        this.x += this.sideVelocity;\r\n        this.y += this.velocity;\r\n        this.velocity += CONSTANTS.GRAVITY;\r\n        if (Math.abs(this.velocity) >= CONSTANTS.TERMINAL_VELOCITY) {\r\n            this.velocity = this.velocity > 0 ? CONSTANTS.TERMINAL_VELOCITY : CONSTANTS.TERMINAL_VELOCITY * -1;\r\n        }\r\n    }\r\n\r\n    drawBase(ctx) {\r\n        ctx.drawImage(this.playerSprite, 0, 0, 64, 80, this.x, this.y, 64, 80);\r\n    }\r\n\r\n    drawJump(ctx) {\r\n        ctx.drawImage(this.playerSprite, 0, 80, 64, 80, this.x, this.y, 64, 80);\r\n    }\r\n\r\n    drawDivekick(ctx) {\r\n        ctx.drawImage(this.playerSprite, 0, 160, 64, 80, this.x, this.y, 64, 80);\r\n    }\r\n\r\n    updateSpinFrame() {\r\n        this.currentSpinFrame = (this.currentSpinFrame + 1) % SPINFRAMES.length;\r\n    }\r\n\r\n    drawSpin(ctx) {\r\n        this.updateSpinFrame();\r\n        const currentFrame = SPINFRAMES[this.currentSpinFrame];\r\n        ctx.drawImage(this.spinSprite, 0, currentFrame, 64, 64, this.x, this.y, 64, 64);\r\n    }\r\n\r\n    draw(ctx) {\r\n        ctx.clearRect(0, 0, 1000, 500);\r\n        if (this.jumping && !this.spinning) {\r\n            this.drawJump(ctx);\r\n        } else if (this.divekicking) {\r\n            this.drawDivekick(ctx);\r\n        } else if (this.spinning) {\r\n            this.drawSpin(ctx);\r\n        } else {\r\n            this.drawBase(ctx)\r\n        }\r\n    }\r\n\r\n    animate(ctx) {\r\n        this.move();\r\n        this.draw(ctx);\r\n    }\r\n}\r\n\r\nexport default Player;","class Background {\r\n    constructor(ctx, scrollSpeed) {\r\n        this.ctx = ctx;\r\n        this.scrollSpeed = scrollSpeed;\r\n        this.backgroundImg = new Image();\r\n        this.backgroundImg.src = './src/assets/background.png';\r\n        this.x = 0;\r\n    }\r\n\r\n    animate() {\r\n        this.ctx.clearRect(0, 0, 1000, 500);\r\n        this.x -= this.scrollSpeed;\r\n        this.ctx.drawImage(this.backgroundImg, this.x, 0); \r\n        this.ctx.drawImage(this.backgroundImg, this.x + 1600, 0);\r\n        if (this.x === -1600) this.x = 0; \r\n    }\r\n}\r\n\r\nexport default Background;","const CONSTANTS = {\r\n    MOVE_SPEED: 2,\r\n    SPRITE_HEIGHT: 128,\r\n    SPRITE_WIDTH: 128\r\n};\r\n\r\nclass Enemy {\r\n    constructor(moveDir, position) {\r\n        this.enemySprite = new Image();\r\n        this.enemySprite.src = './src/assets/divekicker_enemy_128.png';\r\n        this.moveDir = moveDir;\r\n        this.startingPosition = position;\r\n        this.positiveMove = true;\r\n        this.x = position.x;\r\n        this.y = position.y;\r\n        this.hit = false;\r\n\r\n        this.draw = this.draw.bind(this);\r\n    }\r\n\r\n    getBounds() {\r\n        return {\r\n            top: this.y,\r\n            right: this.x + (CONSTANTS.SPRITE_WIDTH / 2),\r\n            left: this.x,\r\n            bottom: this.y + (CONSTANTS.SPRITE_HEIGHT / 2)\r\n        }\r\n    }\r\n\r\n    move() {\r\n        // if (this.y <= (this.startingPosition.y - CONSTANTS.SPRITE_HEIGHT)) this.positiveMove = false;\r\n        // if (this.y >= (this.startingPosition.y + CONSTANTS.SPRITE_HEIGHT)) this.positiveMove = true;\r\n        // if (this.moveDir === 'vertical') {\r\n        if (this.y <= (this.startingPosition.y - (CONSTANTS.SPRITE_HEIGHT / 2))) this.positiveMove = false;\r\n        if (this.y >= (this.startingPosition.y + (CONSTANTS.SPRITE_HEIGHT / 2))) this.positiveMove = true;\r\n\r\n        const change = this.positiveMove ? CONSTANTS.MOVE_SPEED : -CONSTANTS.MOVE_SPEED;\r\n        this.y -= change;\r\n        // } else {\r\n        //     if (this.x <= (this.startingPosition.x - CONSTANTS.SPRITE_WIDTH)) this.positiveMove = true;\r\n        //     if (this.x >= (this.startingPosition.x + CONSTANTS.SPRITE_WIDTH)) this.positiveMove = false;\r\n\r\n        //     const change = this.positiveMove ? CONSTANTS.MOVE_SPEED : -CONSTANTS.MOVE_SPEED;\r\n        //     this.x += change;\r\n        // }\r\n    }\r\n\r\n    drawBase(ctx) {\r\n        ctx.drawImage(this.enemySprite, 0, 0, 128, 128, this.x, this.y, 128, 128);\r\n    }\r\n\r\n    drawHit(ctx) {\r\n        ctx.drawImage(this.enemySprite, 0, 128, 128, 128, this.x, this.y, 128, 128);\r\n    }\r\n\r\n    draw(ctx) {\r\n        this.hit ? this.drawHit(ctx) : this.drawBase(ctx);\r\n    }\r\n\r\n    animate(ctx) {\r\n        this.move();\r\n        this.draw(ctx);\r\n    }\r\n}\r\n\r\nexport default Enemy;","import Enemy from './enemy';\r\n\r\nconst CONSTANTS = {\r\n    MAX_ENEMIES: 8,\r\n    SCROLL_SPEED: 5,\r\n    OFFSCREEN_ENEMY: [5, 6, 7, 8]\r\n}\r\n\r\nclass Level {\r\n    constructor() {\r\n        this.height = 500;\r\n        this.width = 1000;\r\n        this.currentEnemyIdx = 0;\r\n        this.difficulty = 0;\r\n        this.enemies = [\r\n            this.createEnemy(3),\r\n            this.createEnemy(3),\r\n            this.createEnemy(4),\r\n            this.createEnemy(5)\r\n        ];\r\n\r\n        this.soundFXEnabled = true;\r\n        this.initializeSoundFX();\r\n    }\r\n\r\n    initializeSoundFX() {\r\n        this.spinImpactSound = new Audio('./src/assets/soundFX/spin_impact_3.wav');\r\n        this.divekickImpactSound = new Audio('./src/assets/soundFX/divekick_impact.mp3');\r\n        this.divekickImpactSound.playbackRate = 2.5;\r\n        this.spinImpactSound.volume = this.soundFXEnabled ? 0.35 : 0;\r\n        this.divekickImpactSound.volume = this.soundFXEnabled ? 0.25 : 0;\r\n    }\r\n\r\n    toggleSoundFX() {\r\n        if (this.soundFXEnabled) {\r\n            this.soundFXEnabled = false;\r\n            this.spinImpactSound.volume = 0;\r\n            this.divekickImpactSound.volume = 0;\r\n        } else {\r\n            this.soundFXEnabled = true;\r\n            this.spinImpactSound.volume = 0.35;\r\n            this.divekickImpactSound.volume = 0.25;\r\n        }\r\n    }\r\n\r\n    playSpinImpactSound() {\r\n        this.spinImpactSound.currentTime = 0;\r\n        this.spinImpactSound.play();\r\n    }\r\n\r\n    playDivekickImpactSound() {\r\n        this.divekickImpactSound.currentTime = 0;\r\n        this.divekickImpactSound.play();\r\n    }\r\n\r\n    randomizeEnemySpawn(num) {\r\n        switch(num) {\r\n            case 1:\r\n                return {\r\n                    x: Math.floor(Math.random() * 250),\r\n                    y: Math.floor(Math.random() * 400) + 100 \r\n                }\r\n            case 2:\r\n                return {\r\n                    x: Math.floor(Math.random() * 250) + 250,\r\n                    y: Math.floor(Math.random() * 400) + 100 \r\n                }\r\n            case 3:\r\n                return {\r\n                    x: Math.floor(Math.random() * 250) + 500,\r\n                    y: Math.floor(Math.random() * 300) + 200 \r\n                }\r\n            case 4:\r\n                return {\r\n                    x: Math.floor(Math.random() * 250) + 750,\r\n                    y: Math.floor(Math.random() * 300) + 100 \r\n                }\r\n            case 5:\r\n                return {\r\n                    x: Math.floor(Math.random() * 1) + 1000,\r\n                    y: Math.floor(Math.random() * 350) + 100 \r\n                }\r\n            case 6:\r\n                return {\r\n                    x: Math.floor(Math.random() * 1) + 1100,\r\n                    y: Math.floor(Math.random() * 350) + 100 \r\n                }\r\n            case 7:\r\n                return {\r\n                    x: Math.floor(Math.random() * 1) + 1200,\r\n                    y: Math.floor(Math.random() * 400)\r\n                }\r\n            case 8:\r\n                return {\r\n                    x: Math.floor(Math.random() * 1) + 1200,\r\n                    y: Math.floor(Math.random() * 200) \r\n                }\r\n            default:\r\n                return {\r\n                    x: Math.floor(Math.random() * 250),\r\n                    y: Math.floor(Math.random() * 500) \r\n                }\r\n        }\r\n    }\r\n\r\n    randomizeMoveDirection() {\r\n        const num = Math.floor(Math.random() * 2);\r\n        const moveDir = num === 0 ? 'horizontal' : 'vertical';\r\n        return moveDir;\r\n    }\r\n\r\n    collisionCheck(player, enemy, scoreTracker) {\r\n        const playerBounds = player.getBounds();\r\n        const enemyBounds = enemy.getBounds();\r\n        if (playerBounds.left > enemyBounds.right || playerBounds.right < enemyBounds.left) return false;\r\n        if (playerBounds.top > enemyBounds.bottom || playerBounds.bottom < enemyBounds.top) return false;\r\n        if (player.divekicking) {\r\n            player.bounce();\r\n            scoreTracker.enemyKill(enemy.hit);\r\n            enemy.hit = true;\r\n            this.playDivekickImpactSound();\r\n        } else if (player.spinning) {\r\n            scoreTracker.enemyKill(enemy.hit);\r\n            this.playSpinImpactSound();\r\n            enemy.hit = true;\r\n        } else if (!player.invincible) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    playerCollision(player, scoreTracker) {\r\n        let collision = false;\r\n        this.enemies.forEach(enemy => {\r\n            if (this.collisionCheck(player, enemy, scoreTracker)) collision = true;\r\n        });\r\n\r\n        return collision;\r\n    }\r\n\r\n    createEnemy(num) {\r\n        // return new Enemy(this.randomizeMoveDirection(), this.randomizeEnemySpawn(num));\r\n        return new Enemy('vertical', this.randomizeEnemySpawn(num));\r\n    }\r\n\r\n    animateEnemies(ctx) {\r\n        this.enemies.forEach(enemy => enemy.animate(ctx))\r\n    }\r\n\r\n    scrollEnemies() {\r\n        this.enemies.forEach(enemy => {\r\n            enemy.x -= (CONSTANTS.SCROLL_SPEED + this.difficulty)\r\n        });\r\n\r\n        if (this.enemies[0].x <= 200 && this.enemies.length < CONSTANTS.MAX_ENEMIES) {\r\n            const enemyNum = CONSTANTS.OFFSCREEN_ENEMY[this.currentEnemyIdx];\r\n            this.currentEnemyIdx = (this.currentEnemyIdx + 1) % CONSTANTS.OFFSCREEN_ENEMY.length;\r\n            this.enemies.push(this.createEnemy(enemyNum));\r\n        }\r\n\r\n        if (this.enemies[0].x <= -70) {\r\n            this.enemies.shift();\r\n        }\r\n    }\r\n\r\n    animate(ctx) {\r\n        this.animateEnemies(ctx);\r\n        this.scrollEnemies();\r\n    }\r\n}\r\n\r\nexport default Level;","class Menu {\r\n    constructor(game) {\r\n        this.game = game;\r\n        this.menu = document.getElementById('menu');\r\n        this.controlsMenu = document.getElementById('controls-menu');\r\n        this.startButton = document.getElementById('start-btn');\r\n        this.controlsButton = document.getElementById('controls-menu-btn');\r\n        this.closeButton = document.getElementById('close-btn');\r\n        this.initializeSoundFX();\r\n        this.initializeMenuButtons();\r\n\r\n        this.openMenu = this.openMenu.bind(this);\r\n        this.closeMenu = this.closeMenu.bind(this);\r\n    }\r\n\r\n    initializeSoundFX() {\r\n        this.menuButtonSounds = new Audio('./src/assets/soundFX/menu_button_sounds.mp3');\r\n        this.menuButtonSounds.volume = 0.4;\r\n    }\r\n\r\n    initializeMenuButtons() {\r\n        this.startButton.addEventListener('click', this.startGame.bind(this));\r\n        this.controlsButton.addEventListener('click', () => this.openMenu('controls'));\r\n        this.closeButton.addEventListener('click', () => this.closeMenu('controls'))\r\n    }\r\n\r\n    playMenuButtonSound() {\r\n        this.menuButtonSounds.pause();\r\n        this.menuButtonSounds.currentTime = 0;\r\n        this.menuButtonSounds.play();\r\n    }\r\n\r\n    openMenu(id) {\r\n        if (id === 'menu') {\r\n            this.menu.className = 'open';\r\n        } else {\r\n            this.playMenuButtonSound();\r\n            this.controlsMenu.className = 'open';\r\n        }\r\n    }\r\n\r\n    closeMenu(id) {\r\n        if (id === 'menu') {\r\n            this.menu.className = 'closed';\r\n        } else {\r\n            this.playMenuButtonSound();\r\n            this.controlsMenu.className = 'closed';\r\n        }\r\n    }\r\n\r\n    startGame() {\r\n        this.playMenuButtonSound();\r\n        const gameStartTimer = setInterval(() => {\r\n            this.closeMenu('menu');\r\n            this.game.start();\r\n            clearInterval(gameStartTimer);\r\n        }, 500);\r\n    }\r\n}\r\n\r\nexport default Menu;","const CONSTANTS = {\r\n    SCORE_PER_100_MS: 10,\r\n    ENEMY_KILL: 200\r\n}\r\n\r\nclass ScoreTracker {\r\n    constructor(game) {\r\n        this.score = 0;\r\n        this.scoreMultiplyer = 1.0;\r\n\r\n        this.draw = this.draw.bind(this);\r\n    }\r\n\r\n    initializeScore() {\r\n        const that = this;\r\n        return this.scoreIncreaseTimer = setInterval(() => {\r\n            that.score += (CONSTANTS.SCORE_PER_100_MS * that.scoreMultiplyer);\r\n        }, 100);\r\n    }\r\n\r\n    resetScore() {\r\n        if (this.scoreIncreaseTimer) clearInterval(this.scoreIncreaseTimer);\r\n        this.score = 0;\r\n        this.scoreMultiplyer = 1.0;\r\n    }\r\n\r\n    enemyKill(enemyHit) {\r\n        if (!enemyHit) this.score += (CONSTANTS.ENEMY_KILL * this.scoreMultiplyer);\r\n    }\r\n\r\n    draw(ctx) {\r\n        const score = `SCORE: ${this.score}`;\r\n        ctx.font = 'bold 28px sans-serif';\r\n        ctx.lineWidth = 1;\r\n        ctx.fillStyle = '#ffd24c';\r\n        ctx.fillText(score, 20, 40);\r\n    }\r\n}\r\n\r\nexport default ScoreTracker;","import Player from './player';\r\nimport Background from './background';\r\nimport Level from './level';\r\nimport Menu from './menu';\r\nimport ScoreTracker from './score_tracker';\r\n\r\nclass Game {\r\n    constructor(canvas, ctx, backgroundCtx) {\r\n        this.canvas = canvas;\r\n        this.ctx = ctx;\r\n        this.gameStatus = false;\r\n        this.gamePaused = false;\r\n        this.player = new Player(ctx);\r\n        this.background = new Background(backgroundCtx, 1.0);\r\n        this.level = new Level();\r\n        this.menu = new Menu(this);\r\n        this.scoreTracker = new ScoreTracker(this);\r\n\r\n        this.soundFXEnabled = true;\r\n        this.musicEnabled = true;\r\n        this.drawToggle = false;\r\n        this.currentToggle = '';\r\n\r\n        this.initializeControls();\r\n\r\n        this.rightPressed = false;\r\n        this.leftPressed = false;\r\n\r\n        this.finalScoreMessage = document.getElementById('final-score');\r\n        this.restartMessage = document.getElementById('restart-msg');\r\n\r\n        this.animate = this.animate.bind(this);\r\n    }\r\n\r\n    initializeControls() {\r\n        window.addEventListener('keydown', e => {\r\n            if (e.defaultPrevented) return;\r\n\r\n            if (this.gameStatus) {\r\n                switch(e.code) {\r\n                    case 'Space':\r\n                        this.player.jump();\r\n                        break;\r\n                    case 'ArrowDown':\r\n                        this.player.diveKick();\r\n                        break;\r\n                    case 'ArrowRight':\r\n                        this.rightPressed = true;\r\n                        this.player.moveRight();\r\n                        break;\r\n                    case 'ArrowLeft':\r\n                        this.leftPressed = true;\r\n                        this.player.moveLeft();\r\n                        break;\r\n                    case 'KeyQ':\r\n                        this.player.spin();\r\n                        break;\r\n                    case 'KeyM':\r\n                        this.toggleMusic();\r\n                        break;\r\n                    case 'KeyN':\r\n                        this.toggleSoundFX();\r\n                        break;\r\n                    default:\r\n                        return;\r\n                }\r\n            } else {\r\n                switch(e.code) {\r\n                    case 'KeyR':\r\n                        if (this.menu.menu.className !== 'open') this.start();\r\n                        break;\r\n                    case 'KeyM':\r\n                        this.toggleMusic();\r\n                        break;\r\n                    case 'KeyN':\r\n                        this.toggleSoundFX();\r\n                        break;\r\n                    default:\r\n                        return;\r\n                }\r\n            }\r\n\r\n        });\r\n\r\n        window.addEventListener('keyup', e => {\r\n            if (e.defaultPrevented) return;\r\n\r\n            switch(e.code) {\r\n                case 'ArrowRight':\r\n                    this.rightPressed = false;\r\n                    if (!this.leftPressed) this.player.sideVelocity = 0;\r\n                    break;\r\n                case 'ArrowLeft':\r\n                    this.leftPressed = false;\r\n                    if (!this.rightPressed) this.player.sideVelocity = 0;\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    initializeGame() {\r\n        this.menu.openMenu('menu');\r\n        this.gameMusic = new Audio('src/assets/music/POL-underground-army-short-looped.wav');\r\n        this.gameOverSound = new Audio('src/assets/soundFX/game_loss.mp3');\r\n\r\n        this.gameMusic.loop = true;\r\n        this.gameMusic.volume = this.musicEnabled ? 0.35 : 0;\r\n        this.gameOverSound.volume = this.soundFXEnabled ? 0.35 : 0;\r\n    }\r\n\r\n    toggleMusic() {\r\n        this.musicEnabled = this.musicEnabled ? false : true;\r\n        this.gameMusic.volume = this.musicEnabled ? 0.35 : 0;\r\n        this.currentToggle = 'music';\r\n        this.drawToggle = true;\r\n        if (!this.gameStatus) this.drawSoundToggle('music');\r\n        if (this.drawToggleTimer) clearInterval(this.drawToggleTimer);\r\n        this.drawToggleTimer = setInterval(() => {\r\n            this.drawToggle = false;\r\n            clearInterval(this.drawToggleTimer);\r\n        }, 1500);\r\n    }\r\n\r\n    toggleSoundFX() {\r\n        this.soundFXEnabled = this.soundFXEnabled ? false : true;\r\n        this.gameOverSound.volume = this.soundFXEnabled ? 0.35 : 0;\r\n        this.player.toggleSoundFX();\r\n        this.level.toggleSoundFX();\r\n        this.currentToggle = 'soundFX';\r\n        this.drawToggle = true;\r\n        if (!this.gameStatus) this.drawSoundToggle('soundFX');\r\n        if (this.drawToggleTimer) clearInterval(this.drawToggleTimer);\r\n        this.drawToggleTimer = setInterval(() => {\r\n            this.drawToggle = false;\r\n            clearInterval(this.drawToggleTimer);\r\n        }, 1500);\r\n    }\r\n\r\n    drawNotification(message) {\r\n        if (!this.gameStatus) this.ctx.clearRect(825, 472, 180, 28);\r\n        this.ctx.font = 'bold 28px sans-serif';\r\n        this.ctx.lineWidth = 1;\r\n        this.ctx.fillStyle = '#ffd24c';\r\n        this.ctx.fillText(message, 825, 495);\r\n    }\r\n\r\n    drawSoundToggle(soundType) {\r\n        if (soundType === 'soundFX') {\r\n            if (this.soundFXEnabled && this.drawToggle) {\r\n                this.drawNotification('SOUND: ON');\r\n            } else if (!this.soundFXEnabled && this.drawToggle) {\r\n                this.drawNotification('SOUND: OFF');\r\n            }\r\n        } else {\r\n            if (this.musicEnabled && this.drawToggle) {\r\n                this.drawNotification('MUSIC: ON');\r\n            } else if (!this.musicEnabled && this.drawToggle) {\r\n                this.drawNotification('MUSIC: OFF');\r\n            }\r\n        } \r\n    }\r\n\r\n    gameOver() {\r\n        return this.level.playerCollision(this.player, this.scoreTracker) || this.player.hitBottom();\r\n    }\r\n\r\n    reset() {\r\n        if (this.difficultyIncreaseTimer) clearInterval(this.difficultyIncreaseTimer);\r\n        this.gameStatus = false;\r\n        this.player.stopSoundFX();\r\n\r\n        this.player = new Player(this.ctx);\r\n        this.level = new Level();\r\n\r\n        if (!this.soundFXEnabled) {\r\n            this.player.toggleSoundFX();\r\n            this.level.toggleSoundFX();\r\n        }\r\n\r\n        this.scoreTracker.resetScore();\r\n        this.scoreTracker = new ScoreTracker(this);\r\n        this.showRestartMessage(this.finalScore);\r\n        this.gameMusic.pause();\r\n        this.gameMusic.currentTime = 0;\r\n    }\r\n\r\n    showRestartMessage(finalScore) {\r\n        this.finalScoreMessage.innerHTML = `FINAL SCORE: ${finalScore}`;\r\n        this.restartMessage.className = 'show';\r\n    }\r\n\r\n    hideRestartMessage() {\r\n        this.restartMessage.className = 'hide';\r\n    }\r\n\r\n    animate() {\r\n        if (this.gameStatus && !this.gamePaused) {\r\n            this.background.animate()\r\n            this.player.animate(this.ctx);\r\n            this.level.animate(this.ctx);\r\n            this.scoreTracker.draw(this.ctx);\r\n\r\n            if (this.drawToggle) {\r\n                this.drawSoundToggle(this.currentToggle);\r\n            }\r\n\r\n            if (this.gameOver()) {\r\n                this.finalScore = Math.floor(this.scoreTracker.score);\r\n                this.gameOverSound.play();\r\n                this.reset();\r\n            }\r\n\r\n            requestAnimationFrame(this.animate);\r\n        }\r\n    }\r\n\r\n    start() {\r\n        this.gameStatus = true;\r\n        this.hideRestartMessage();\r\n        this.scoreTracker.initializeScore();\r\n        this.gameOverSound.pause();\r\n        this.gameOverSound.currentTime = 0;\r\n        this.gameMusic.play();\r\n        this.difficultyIncreaseTimer = setInterval(() => {\r\n            if (this.level.difficulty < 10) this.level.difficulty++;\r\n            this.scoreTracker.scoreMultiplyer += 0.5;\r\n        }, 10000);\r\n        this.animate();\r\n    }\r\n}\r\n\r\nexport default Game;","import Game from './game';\r\nimport './styles/reset.scss';\r\nimport \"./styles/divekicker.scss\";\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    const canvas = document.getElementById('canvas');\r\n    const ctx = canvas.getContext('2d');\r\n\r\n    const background = document.getElementById('bg-canvas');\r\n    const backgroundCtx = background.getContext('2d');\r\n\r\n    const newGame = new Game(canvas, ctx, backgroundCtx);\r\n    newGame.initializeGame();\r\n})"],"sourceRoot":""}